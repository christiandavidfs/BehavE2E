[{"name": "UPDATE posts example", "status": "broken", "statusDetails": {"message": "KeyError: 'PUT.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "steps": [{"name": "Given I set sample REST API url", "status": "passed", "start": 1599225865018, "stop": 1599225865018}, {"name": "Given I Set PUT posts api endpoint for \"1\"", "status": "passed", "start": 1599225865018, "stop": 1599225865019}, {"name": "When I Set Update request Body", "status": "passed", "start": 1599225865019, "stop": 1599225865019}, {"name": "And Send PUT HTTP request", "status": "passed", "start": 1599225865019, "stop": 1599225865407}, {"name": "Then I receive valid HTTP response code 200 for \"PUT.\"", "status": "broken", "statusDetails": {"message": "KeyError: 'PUT.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "start": 1599225865407, "stop": 1599225865407}, {"name": "And Response BODY \"PUT\" is non-empty", "status": "broken", "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'Response BODY \"PUT\" is non-empty')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then Response BODY \"PUT\" is non-empty')\n\n"}, "start": 1599225865408, "stop": 1599225865408}], "start": 1599225865017, "stop": 1599225865408, "uuid": "107925df-e244-461c-8f0c-72519ab6f0f1", "historyId": "297e1b4893437e127a9361eb85746ce8", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Test CRUD methods in Sample REST API testing framework"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}, {"name": "run a simple test false", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/demo.py\", line 13, in step_impl\n    assert context.failed is False\n"}, "steps": [{"name": "Given we have behave installed", "status": "passed", "start": 1599225866040, "stop": 1599225866040}, {"name": "When we implement a test", "status": "passed", "start": 1599225866040, "stop": 1599225866040}, {"name": "Then behave will test it for us as false!", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/demo.py\", line 13, in step_impl\n    assert context.failed is False\n"}, "start": 1599225866040, "stop": 1599225866040}], "start": 1599225866039, "stop": 1599225866041, "uuid": "bd6c460d-7d75-4df4-81be-d618c57a190d", "historyId": "fa98337eb57abb91944e220ca09c40b1", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "showing off behave"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}, {"name": "run a simple test true", "status": "passed", "steps": [{"name": "Given we have behave installed", "status": "passed", "start": 1599225866042, "stop": 1599225866042}, {"name": "When we implement a test", "status": "passed", "start": 1599225866042, "stop": 1599225866042}, {"name": "Then behave will test it for us as true!", "status": "passed", "start": 1599225866042, "stop": 1599225866042}], "start": 1599225866041, "stop": 1599225866042, "uuid": "719cb940-af0c-4e20-9799-23ae959cdc48", "historyId": "53ea917691122694cc52d6e75c807cba", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "showing off behave"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}, {"name": "DELETE posts example", "status": "broken", "statusDetails": {"message": "KeyError: 'DELETE.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "steps": [{"name": "Given I set sample REST API url", "status": "passed", "start": 1599225865409, "stop": 1599225865409}, {"name": "Given I Set DELETE posts api endpoint for \"1\"", "status": "passed", "start": 1599225865410, "stop": 1599225865410}, {"name": "When I Send DELETE HTTP request", "status": "passed", "start": 1599225865410, "stop": 1599225866038}, {"name": "Then I receive valid HTTP response code 200 for \"DELETE.\"", "status": "broken", "statusDetails": {"message": "KeyError: 'DELETE.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "start": 1599225866038, "stop": 1599225866038}], "start": 1599225865408, "stop": 1599225866038, "uuid": "72637d20-bb60-4a82-9775-51c8236282e7", "historyId": "682fed6fc8e4dd3a327340d6dfc31865", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Test CRUD methods in Sample REST API testing framework"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}, {"name": "GET posts example", "status": "broken", "statusDetails": {"message": "KeyError: 'GET.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "steps": [{"name": "Given I set sample REST API url", "status": "passed", "start": 1599225864979, "stop": 1599225864979}, {"name": "Given I Set GET posts api endpoint \"1\"", "status": "passed", "start": 1599225864979, "stop": 1599225864979}, {"name": "When I Set HEADER param request content type as \"application/json.\"", "status": "passed", "start": 1599225864979, "stop": 1599225864980}, {"name": "And Send GET HTTP request", "status": "passed", "start": 1599225864980, "stop": 1599225865015}, {"name": "Then I receive valid HTTP response code 200 for \"GET.\"", "status": "broken", "statusDetails": {"message": "KeyError: 'GET.'\n", "trace": "  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/model.py\", line 1329, in run\n    match.run(runner.context)\n  File \"/home/christian/anaconda3/lib/python3.8/site-packages/behave/matchers.py\", line 98, in run\n    self.func(context, *args, **kwargs)\n  File \"features/steps/sample_step_implementation.py\", line 69, in step_impl\n    print('Get rep code for '+request_name+':'+ str(response_codes[request_name]))\n"}, "start": 1599225865015, "stop": 1599225865016}, {"name": "And Response BODY \"GET\" is non-empty", "status": "broken", "statusDetails": {"message": "\nYou can implement step definitions for undefined steps with these snippets:\n\n@then(u'Response BODY \"GET\" is non-empty')\ndef step_impl(context):\n    raise NotImplementedError(u'STEP: Then Response BODY \"GET\" is non-empty')\n\n"}, "start": 1599225865016, "stop": 1599225865016}], "start": 1599225864979, "stop": 1599225865016, "uuid": "0f0c792c-7927-4cd6-bd17-d66fe5d6cf94", "historyId": "4184800fbff4c41834b983eb47f31b42", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Test CRUD methods in Sample REST API testing framework"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}, {"name": "POST post example", "status": "passed", "steps": [{"name": "Given I set sample REST API url", "status": "passed", "start": 1599225864361, "stop": 1599225864361}, {"name": "Given I Set POST posts api endpoint", "status": "passed", "start": 1599225864361, "stop": 1599225864361}, {"name": "When I Set HEADER param request content type as \"application/json.\"", "status": "passed", "start": 1599225864361, "stop": 1599225864361}, {"name": "And Set request Body", "status": "passed", "start": 1599225864361, "stop": 1599225864361}, {"name": "And Send a POST HTTP request", "status": "passed", "start": 1599225864361, "stop": 1599225864977}, {"name": "Then I receive valid HTTP response code 201", "status": "passed", "start": 1599225864977, "stop": 1599225864978}, {"name": "And Response BODY \"POST\" is non-empty.", "status": "passed", "start": 1599225864978, "stop": 1599225864978}], "start": 1599225864360, "stop": 1599225864978, "uuid": "c36d12ec-e67d-4718-86f2-86dc84284f66", "historyId": "9a399002bf6e5b76aa71811369ffad16", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "Test CRUD methods in Sample REST API testing framework"}, {"name": "framework", "value": "behave"}, {"name": "language", "value": "cpython3"}]}]